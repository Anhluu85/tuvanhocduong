# pages/üîë_Admin_Dashboard.py

import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import pandas as pd
import os
import datetime # Th√™m ƒë·ªÉ x·ª≠ l√Ω th·ªùi gian n·∫øu c·∫ßn
import psycopg2 # ƒê·∫£m b·∫£o ƒë√£ import

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Admin Dashboard", layout="wide", initial_sidebar_state="expanded")

# --- ƒê·ªçc c·∫•u h√¨nh x√°c th·ª±c ---
config = None
config_path = 'config.yaml'
try:
    # ... (code ƒë·ªçc config.yaml nh∆∞ c≈©) ...
    if os.path.exists(config_path):
        with open(config_path) as file:
            config = yaml.load(file, Loader=SafeLoader)
    else:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh t·∫°i '{config_path}'.")
        st.stop()
except Exception as e:
    st.error(f"L·ªói ƒë·ªçc/ph√¢n t√≠ch config.yaml: {e}")
    st.stop()

if not config:
    st.error("L·ªói: Kh√¥ng t·∫£i ƒë∆∞·ª£c c·∫•u h√¨nh.")
    st.stop()

# --- L·∫•y Cookie Key t·ª´ Secrets ---
cookie_key = None
try:
    # ... (code l·∫•y cookie_key nh∆∞ c≈©) ...
    cookie_key = st.secrets["cookie"]["key"]
    if not cookie_key or len(cookie_key) < 32:
        raise ValueError("Cookie key kh√¥ng h·ª£p l·ªá.")
except Exception as e:
     st.error(f"L·ªói c·∫•u h√¨nh Cookie Key: {e}")
     st.stop()

# --- Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Authenticator ---
authenticator = None
try:
    # ... (code kh·ªüi t·∫°o authenticator nh∆∞ c≈©) ...
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        cookie_key,
        config['cookie']['expiry_days']
    )
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o Authenticator: {e}")
    st.stop()

if not authenticator:
     st.error("L·ªói: Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c Authenticator.")
     st.stop()

# --- Hi·ªÉn th·ªã Form ƒêƒÉng nh·∫≠p ---
name, authentication_status, username = authenticator.login('main')

# --- X·ª≠ l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ---
if authentication_status is False:
    st.error('T√™n ƒëƒÉng nh·∫≠p/m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c')
    st.stop()
elif authentication_status is None:
    st.warning('Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u')
    st.stop()
elif authentication_status: # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    # --- B·∫ÆT ƒê·∫¶U N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
    st.sidebar.success(f"Xin ch√†o, **{name}**!")
    authenticator.logout('ƒêƒÉng xu·∫•t', 'sidebar')

    st.title("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn Admin - AI ƒê·ªìng H√†nh H·ªçc ƒê∆∞·ªùng")
    st.markdown("---")

    # --- PH·∫¶N T∆Ø∆†NG T√ÅC CSDL ---
    @st.cache_resource # Cache k·∫øt n·ªëi ƒë·ªÉ tr√°nh m·ªü l·∫°i li√™n t·ª•c
    def connect_db():
        """K·∫øt n·ªëi ƒë·∫øn CSDL PostgreSQL."""
        try:
            # ∆Øu ti√™n ƒë·ªçc URI n·∫øu c√≥
            if "uri" in st.secrets.get("database", {}):
                 conn_uri = st.secrets["database"]["uri"]
                 conn = psycopg2.connect(conn_uri)
            # N·∫øu kh√¥ng c√≥ URI, d√πng c√°c tham s·ªë ri√™ng l·∫ª
            elif "host" in st.secrets.get("database", {}):
                 db_creds = st.secrets["database"]
                 conn = psycopg2.connect(
                     host=db_creds["host"],
                     port=db_creds.get("port", 5432),
                     dbname=db_creds["dbname"],
                     user=db_creds["user"],
                     password=db_creds["password"],
                     sslmode=db_creds.get("sslmode", "require") # Quan tr·ªçng cho Neon
                 )
            else:
                st.error("Thi·∫øu th√¥ng tin k·∫øt n·ªëi CSDL trong Streamlit Secrets.")
                return None
            print("K·∫øt n·ªëi CSDL th√†nh c√¥ng!") # Ghi log ra console khi th√†nh c√¥ng
            return conn
        except psycopg2.OperationalError as e:
             # L·ªói c·ª• th·ªÉ h∆°n khi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server
             st.error(f"L·ªói k·∫øt n·ªëi CSDL: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Ki·ªÉm tra host, port, network, SSL v√† th√¥ng tin x√°c th·ª±c.")
             print(f"L·ªói OperationalError k·∫øt n·ªëi DB: {e}") # Ghi log chi ti·∫øt
             return None
        except Exception as e:
            # C√°c l·ªói kh√°c (v√≠ d·ª•: sai m·∫≠t kh·∫©u, sai t√™n db)
            st.error(f"L·ªói k·∫øt n·ªëi CSDL: {e}")
            print(f"L·ªói kh√°c k·∫øt n·ªëi DB: {e}") # Ghi log chi ti·∫øt
            return None

    db_connection = connect_db()

    def fetch_dashboard_stats(conn):
        """L·∫•y c√°c s·ªë li·ªáu th·ªëng k√™ t·ª´ CSDL."""
        if conn is None:
            # Tr·∫£ v·ªÅ gi√° tr·ªã l·ªói/N/A n·∫øu kh√¥ng c√≥ k·∫øt n·ªëi
            return {"weekly_chats": "N/A", "new_alerts": "N/A", "popular_topic": "N/A"}

        stats = {"weekly_chats": "N/A", "new_alerts": "N/A", "popular_topic": "N/A"} # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        cursor = None
        try:
            cursor = conn.cursor() # S·ª≠ d·ª•ng cursor m·∫∑c ƒë·ªãnh (tr·∫£ v·ªÅ tuple)

            # ƒê·∫øm c·∫£nh b√°o m·ªõi
            cursor.execute("SELECT COUNT(*) FROM alerts WHERE status = 'M·ªõi'")
            result_alerts = cursor.fetchone()
            stats["new_alerts"] = result_alerts[0] if result_alerts else 0

            # ƒê·∫øm cu·ªôc tr√≤ chuy·ªán (V√≠ d·ª• - C·∫ßn b·∫£ng 'conversations' v·ªõi c·ªôt 'start_time')
            # cursor.execute("SELECT COUNT(*) FROM conversations WHERE start_time >= NOW() - interval '7 day'")
            # result_chats = cursor.fetchone()
            # stats["weekly_chats"] = result_chats[0] if result_chats else 0
            stats["weekly_chats"] = "N/A" # T·∫°m th·ªùi

            # L·∫•y ch·ªß ƒë·ªÅ n·ªïi b·∫≠t t·ª´ l√Ω do c·∫£nh b√°o
            cursor.execute("""
                SELECT reason, COUNT(*) as count
                FROM alerts
                GROUP BY reason
                ORDER BY count DESC
                LIMIT 1
            """)
            popular = cursor.fetchone()
            stats["popular_topic"] = popular[0] if popular else "Kh√¥ng c√≥"

            print(f"Fetched stats: {stats}") # Log k·∫øt qu·∫£
            return stats

        except Exception as e:
            st.error(f"L·ªói truy v·∫•n th·ªëng k√™: {e}")
            print(f"L·ªói trong fetch_dashboard_stats: {e}")
            return stats # Tr·∫£ v·ªÅ dict ch·ª©a l·ªói/N/A
        finally:
             if cursor:
                 cursor.close()

    def fetch_alerts(conn, status_filter=None):
        """L·∫•y danh s√°ch c·∫£nh b√°o t·ª´ CSDL."""
        if conn is None:
            st.warning("Kh√¥ng c√≥ k·∫øt n·ªëi CSDL, s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p cho c·∫£nh b√°o.")
            # --- D·ªØ li·ªáu gi·∫£ l·∫≠p ---
            dummy_alerts_list = [
                 {"id": "dummy_1", "timestamp": datetime.datetime(2023, 10, 27, 10, 15), "reason": "Gi·∫£ l·∫≠p - T·ª± h·∫°i", "snippet": "...", "status": "M·ªõi", "assignee": None, "priority": 1},
                 {"id": "dummy_2", "timestamp": datetime.datetime(2023, 10, 27, 9, 30), "reason": "Gi·∫£ l·∫≠p - Lo √¢u", "snippet": "...", "status": "ƒêang x·ª≠ l√Ω", "assignee": "Admin Demo", "priority": 2},
            ]
            df = pd.DataFrame(dummy_alerts_list)
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            if status_filter and status_filter != "T·∫•t c·∫£":
                return df[df['status'] == status_filter].copy()
            return df.copy()
            # --- K·∫øt th√∫c d·ªØ li·ªáu gi·∫£ l·∫≠p ---

        # L·∫•y d·ªØ li·ªáu th·∫≠t
        print(f"Fetching alerts with filter: {status_filter}") # Log
        try:
            # **QUAN TR·ªåNG**: ƒê·∫£m b·∫£o t√™n c·ªôt kh·ªõp v·ªõi CSDL c·ªßa b·∫°n
            query = "SELECT id, timestamp, reason, snippet, status, assignee, priority FROM alerts"
            params = []
            if status_filter and status_filter != "T·∫•t c·∫£":
                query += " WHERE status = %s"
                params.append(status_filter)
            query += " ORDER BY timestamp DESC"

            print(f"Executing query: {query} with params: {params}") # Log query
            df = pd.read_sql(query, conn, params=params)
            print(f"Fetched {len(df)} alerts from DB.") # Log s·ªë l∆∞·ª£ng

            # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu n·∫øu c·∫ßn (ƒë·∫∑c bi·ªát l√† timestamp)
            if not df.empty:
                if 'timestamp' in df.columns and not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
                     df['timestamp'] = pd.to_datetime(df['timestamp'])
                # X·ª≠ l√Ω m√∫i gi·ªù n·∫øu CSDL l∆∞u UTC v√† b·∫°n mu·ªën hi·ªÉn th·ªã gi·ªù ƒë·ªãa ph∆∞∆°ng
                # V√≠ d·ª•: df['timestamp'] = df['timestamp'].dt.tz_convert('Asia/Ho_Chi_Minh')

            return df

        except Exception as e:
            st.error(f"L·ªñI fetch_alerts: Kh√¥ng th·ªÉ t·∫£i danh s√°ch c·∫£nh b√°o t·ª´ CSDL. Chi ti·∫øt: {e}")
            print(f"--- L·ªñI TRONG fetch_alerts ---")
            print(f"Query: {query}")
            print(f"Params: {params}")
            print(f"L·ªói: {e}")
            print(f"Lo·∫°i l·ªói: {type(e).__name__}")
            print(f"----------------------------")
            return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng

    def update_alert_status_in_db(conn, alert_id, new_status, assignee):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng∆∞·ªùi ph·ª• tr√°ch c·ªßa c·∫£nh b√°o trong CSDL."""
        if conn is None:
            st.error("Kh√¥ng c√≥ k·∫øt n·ªëi CSDL, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t.")
            return False

        cursor = None
        try:
            cursor = conn.cursor()
            print(f"Attempting to update alert ID: {alert_id} to Status: {new_status}, Assignee: {assignee}") # Log
            # **QUAN TR·ªåNG**: ƒê·∫£m b·∫£o t√™n c·ªôt v√† b·∫£ng kh·ªõp
            cursor.execute(
                "UPDATE alerts SET status = %s, assignee = %s WHERE id = %s",
                (new_status, assignee, alert_id)
            )
            conn.commit() # !! L∆ØU THAY ƒê·ªîI V√ÄO CSDL !!

            # Ki·ªÉm tra xem c√≥ d√≤ng n√†o th·ª±c s·ª± ƒë∆∞·ª£c c·∫≠p nh·∫≠t kh√¥ng
            if cursor.rowcount > 0:
                print(f"DB Update successful for alert ID {alert_id}. Rows affected: {cursor.rowcount}") # Log th√†nh c√¥ng
                return True
            else:
                # Kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t (c√≥ th·ªÉ do ID kh√¥ng ƒë√∫ng)
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o ID {alert_id} ƒë·ªÉ c·∫≠p nh·∫≠t ho·∫∑c tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi.")
                conn.rollback() # Kh√¥ng c·∫ßn thi·∫øt nh∆∞ng r√µ r√†ng
                return False

        except Exception as e:
            if conn:
                conn.rollback() # Ho√†n t√°c n·∫øu c√≥ l·ªói
            st.error(f"L·ªói CSDL khi c·∫≠p nh·∫≠t c·∫£nh b√°o ID {alert_id}: {e}")
            print(f"--- L·ªñI TRONG update_alert_status_in_db ---")
            print(f"Alert ID: {alert_id}, New Status: {new_status}, Assignee: {assignee}")
            print(f"L·ªói: {e}")
            print(f"Lo·∫°i l·ªói: {type(e).__name__}")
            print(f"------------------------------------")
            return False
        finally:
             if cursor:
                 cursor.close()

    def add_faq_to_db(conn, question, answer, category=None):
        """Th√™m FAQ m·ªõi v√†o CSDL."""
        if conn is None:
            st.error("Kh√¥ng c√≥ k·∫øt n·ªëi CSDL, kh√¥ng th·ªÉ th√™m FAQ.")
            return False
        cursor = None
        try:
            cursor = conn.cursor()
            # **QUAN TR·ªåNG**: ƒê·∫£m b·∫£o t√™n b·∫£ng v√† c·ªôt kh·ªõp
            print(f"Adding FAQ: Q='{question[:30]}...', Cat='{category}'") # Log
            cursor.execute(
                "INSERT INTO knowledge_base (question, answer, category) VALUES (%s, %s, %s)",
                (question, answer, category)
            )
            conn.commit() # !! L∆ØU THAY ƒê·ªîI V√ÄO CSDL !!
            print("FAQ added successfully to DB.") # Log th√†nh c√¥ng
            return True
        except Exception as e:
            if conn: conn.rollback()
            st.error(f"L·ªói CSDL khi th√™m FAQ: {e}")
            print(f"--- L·ªñI TRONG add_faq_to_db ---")
            print(f"Question: {question[:50]}...")
            print(f"Category: {category}")
            print(f"L·ªói: {e}")
            print(f"Lo·∫°i l·ªói: {type(e).__name__}")
            print(f"---------------------------")
            return False
        finally:
            if cursor: cursor.close()

# ... (sau c√°c h√†m CSDL kh√°c) ...

def fetch_chat_history(conn, session_id):
    """L·∫•y l·ªãch s·ª≠ chat cho m·ªôt session_id c·ª• th·ªÉ t·ª´ CSDL."""
    if conn is None or not session_id:
        st.warning("Y√™u c·∫ßu Session ID ƒë·ªÉ truy v·∫•n l·ªãch s·ª≠ chat.")
        return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng

    print(f"Fetching chat history for session: {session_id}") # Log
    try:
        # L·∫•y c√°c c·ªôt c·∫ßn thi·∫øt, s·∫Øp x·∫øp theo th·ªùi gian
        query = """
            SELECT timestamp, sender, message_content, user_id -- L·∫•y user_id n·∫øu c·∫ßn
            FROM conversations
            WHERE session_id = %s
            ORDER BY timestamp ASC
        """
        df = pd.read_sql(query, conn, params=(session_id,))
        print(f"Fetched {len(df)} messages for session {session_id}.") # Log s·ªë l∆∞·ª£ng

        # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu n·∫øu c·∫ßn
        if not df.empty:
            if 'timestamp' in df.columns and not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
                 df['timestamp'] = pd.to_datetime(df['timestamp'])
            # X·ª≠ l√Ω m√∫i gi·ªù n·∫øu c·∫ßn
            # V√≠ d·ª•: df['timestamp'] = df['timestamp'].dt.tz_convert('Asia/Ho_Chi_Minh')

        return df

    except Exception as e:
        st.error(f"L·ªñI fetch_chat_history cho session {session_id}: {e}")
        print(f"--- L·ªñI TRONG fetch_chat_history ---")
        print(f"Session ID: {session_id}")
        print(f"L·ªói: {e}")
        print(f"Lo·∫°i l·ªói: {type(e).__name__}")
        print(f"---------------------------------")
        return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng
    # --- K·∫æT TH√öC ƒê·ªäNH NGHƒ®A H√ÄM CSDL ---

    # --- Ki·ªÉm tra k·∫øt n·ªëi CSDL ---
    if db_connection is None:
        # H√†m connect_db ƒë√£ hi·ªÉn th·ªã l·ªói, ch·ªâ hi·ªÉn th·ªã c·∫£nh b√°o chung
        st.warning("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn C∆° s·ªü d·ªØ li·ªáu. M·ªôt s·ªë ch·ª©c nƒÉng s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p ho·∫∑c b·ªã h·∫°n ch·∫ø.")
        # Kh√¥ng d·ª´ng app, cho ph√©p hi·ªÉn th·ªã ph·∫ßn kh√¥ng c·∫ßn DB (n·∫øu c√≥)
    else:
        st.success("ƒê√£ k·∫øt n·ªëi C∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng.") # Th√™m th√¥ng b√°o th√†nh c√¥ng

    # --- Hi·ªÉn th·ªã Dashboard T·ªïng quan ---
    st.header("üìà T·ªïng quan Ho·∫°t ƒë·ªông")
    stats = fetch_dashboard_stats(db_connection) # G·ªçi h√†m l·∫•y stats th·∫≠t
    col1, col2, col3 = st.columns(3)
    col1.metric("Cu·ªôc tr√≤ chuy·ªán (7 ng√†y)", stats.get("weekly_chats", "N/A"))
    col2.metric("C·∫£nh b√°o m·ªõi", stats.get("new_alerts", "N/A"))
    col3.metric("Ch·ªß ƒë·ªÅ n·ªïi b·∫≠t", stats.get("popular_topic", "N/A"))

    st.markdown("---")

    # --- Qu·∫£n l√Ω C·∫£nh b√°o ---
    st.header("üö® Qu·∫£n l√Ω C·∫£nh b√°o")
    alerts_df = fetch_alerts(db_connection) # G·ªçi h√†m l·∫•y alerts th·∫≠t

    if not alerts_df.empty:
        st.info(f"T√¨m th·∫•y {len(alerts_df)} c·∫£nh b√°o.") # Th√¥ng tin s·ªë l∆∞·ª£ng
        # B·ªô l·ªçc tr·∫°ng th√°i
        # L·∫•y danh s√°ch tr·∫°ng th√°i t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø ho·∫∑c ƒë·ªãnh nghƒ©a tr∆∞·ªõc
        # status_options = ["T·∫•t c·∫£"] + sorted(list(alerts_df['status'].unique()))
        status_options = ["T·∫•t c·∫£", "M·ªõi", "ƒêang x·ª≠ l√Ω", "ƒê√£ gi·∫£i quy·∫øt"] # Ho·∫∑c ƒë·ªãnh nghƒ©a c·ª©ng n·∫øu mu·ªën th·ª© t·ª± c·ª• th·ªÉ
        selected_status = st.selectbox("L·ªçc theo tr·∫°ng th√°i:", status_options)

        # L·ªçc DataFrame d·ª±a tr√™n l·ª±a ch·ªçn
        if selected_status != "T·∫•t c·∫£":
            # Quan tr·ªçng: ƒê·∫£m b·∫£o alerts_df l√† DataFrame tr∆∞·ªõc khi l·ªçc
            if isinstance(alerts_df, pd.DataFrame):
                 display_df = alerts_df[alerts_df['status'] == selected_status].copy() # Th√™m .copy()
            else:
                 display_df = pd.DataFrame() # Tr·∫£ v·ªÅ df r·ªóng n·∫øu alerts_df kh√¥ng h·ª£p l·ªá
        else:
            display_df = alerts_df.copy() # Th√™m .copy()

        # Hi·ªÉn th·ªã b·∫£ng c·∫£nh b√°o
        st.dataframe(display_df, use_container_width=True, hide_index=True)

        st.subheader("Xem v√† C·∫≠p nh·∫≠t C·∫£nh b√°o")
         # L·∫•y ID t·ª´ DataFrame th·ª±c t·∫ø
        alert_id_options = [""] + (list(alerts_df['id'].astype(str).unique()) if isinstance(alerts_df, pd.DataFrame) and 'id' in alerts_df else [])
        selected_alert_id_str = st.selectbox("Ch·ªçn ID c·∫£nh b√°o ƒë·ªÉ x·ª≠ l√Ω:", alert_id_options)

        # X·ª≠ l√Ω khi m·ªôt ID ƒë∆∞·ª£c ch·ªçn
        if selected_alert_id_str and isinstance(alerts_df, pd.DataFrame):
            try:
                # C·ªë g·∫Øng t√¨m d√≤ng t∆∞∆°ng ·ª©ng, chuy·ªÉn ƒë·ªïi ki·ªÉu ID n·∫øu c·∫ßn (v√≠ d·ª• n·∫øu ID trong DB l√† s·ªë)
                # Gi·∫£ s·ª≠ ID trong DataFrame l√† ki·ªÉu d·ªØ li·ªáu g·ªëc t·ª´ DB
                selected_data_series = alerts_df[alerts_df['id'].astype(str) == selected_alert_id_str].iloc[0]

                # Chuy·ªÉn Series th√†nh Dictionary ƒë·ªÉ d·ªÖ truy c·∫≠p
                selected_data = selected_data_series.to_dict()

                st.write(f"**Chi ti·∫øt c·∫£nh b√°o ID:** `{selected_data.get('id', 'N/A')}`")
                # ƒê·ªãnh d·∫°ng timestamp ƒë·∫πp h∆°n
                ts = selected_data.get('timestamp')
                ts_display = ts.strftime('%Y-%m-%d %H:%M:%S %Z') if pd.notna(ts) else "N/A"
                st.write(f"**Th·ªùi gian:** {ts_display}")
                st.write(f"**L√Ω do:** {selected_data.get('reason', 'N/A')}")
                st.write(f"**Tr√≠ch ƒëo·∫°n:**")
                st.text_area("Snippet", selected_data.get('snippet', ''), height=100, disabled=True)
                st.write(f"**ƒê·ªô ∆∞u ti√™n:** {selected_data.get('priority', 'N/A')}") # Hi·ªÉn th·ªã priority


                # Form c·∫≠p nh·∫≠t
                with st.form(key=f"update_alert_{selected_alert_id_str}"):
                    st.write("**C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng∆∞·ªùi ph·ª• tr√°ch:**")
                    # L·∫•y danh s√°ch status options ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n
                    current_status = selected_data.get('status', status_options[1]) # M·∫∑c ƒë·ªãnh l√† 'M·ªõi' n·∫øu kh√¥ng c√≥
                    try:
                        # T√¨m index c·∫©n th·∫≠n h∆°n
                        current_status_index = status_options.index(current_status) if current_status in status_options else 1
                    except ValueError:
                        current_status_index = 1 # M·∫∑c ƒë·ªãnh v·ªÅ 'M·ªõi' n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i kh√¥ng c√≥ trong options

                    new_status = st.selectbox("Tr·∫°ng th√°i m·ªõi:", options=status_options[1:], index=max(0, current_status_index - 1)) # B·ªè "T·∫•t c·∫£", ƒëi·ªÅu ch·ªânh index
                    # L·∫•y assignee hi·ªán t·∫°i, n·∫øu l√† None/NaN th√¨ d√πng t√™n admin ƒëang login
                    current_assignee = selected_data.get('assignee')
                    default_assignee = name if pd.isna(current_assignee) else current_assignee
                    assignee = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch:", value=default_assignee)

                    submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi")
                    if submitted:
                        # L·∫•y ID g·ªëc (c√≥ th·ªÉ l√† int ho·∫∑c string t√πy DB) ƒë·ªÉ truy·ªÅn v√†o h√†m update
                        original_alert_id = selected_data.get('id')
                        if original_alert_id is not None:
                            # G·ªçi h√†m c·∫≠p nh·∫≠t CSDL th·ª±c t·∫ø
                            success = update_alert_status_in_db(db_connection, original_alert_id, new_status, assignee)
                            if success:
                                st.success(f"ƒê√£ g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t c·∫£nh b√°o {original_alert_id}!")
                                # Rerun ƒë·ªÉ l√†m m·ªõi b·∫£ng d·ªØ li·ªáu
                                st.rerun() # D√πng h√†m rerun chu·∫©n
                            # else: # H√†m update ƒë√£ hi·ªÉn th·ªã l·ªói
                            #    st.error(f"C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t c·∫£nh b√°o {original_alert_id}.")
                        else:
                            st.error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID c·∫£nh b√°o ƒë·ªÉ c·∫≠p nh·∫≠t.")

            except IndexError:
                 st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu chi ti·∫øt cho ID: {selected_alert_id_str}")
            except Exception as e:
                 st.error(f"L·ªói khi hi·ªÉn th·ªã chi ti·∫øt c·∫£nh b√°o: {e}")
                 print(f"L·ªói hi·ªÉn th·ªã chi ti·∫øt c·∫£nh b√°o {selected_alert_id_str}: {e}")


    elif db_connection is not None: # Ch·ªâ hi·ªÉn th·ªã 'kh√¥ng c√≥' n·∫øu c√≥ k·∫øt n·ªëi DB nh∆∞ng fetch v·ªÅ r·ªóng
        st.info("Hi·ªán kh√¥ng c√≥ c·∫£nh b√°o n√†o trong c∆° s·ªü d·ªØ li·ªáu.")
    # Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c DB

    st.markdown("---")

    # --- Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c ---
    st.header("üìö Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c")
    # (C·∫ßn th√™m code ƒë·ªÉ fetch v√† hi·ªÉn th·ªã danh s√°ch FAQ hi·ªán c√≥)
    # V√≠ d·ª•:
    # st.subheader("Danh s√°ch FAQ")
    # faq_df = fetch_faqs(db_connection) # C·∫ßn vi·∫øt h√†m fetch_faqs
    # if faq_df is not None and not faq_df.empty:
    #     st.dataframe(faq_df)
    # else:
    #     st.info("Ch∆∞a c√≥ FAQ n√†o.")

    with st.expander("Th√™m c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) m·ªõi"):
        new_question = st.text_input("C√¢u h·ªèi:", key="faq_question")
        new_answer = st.text_area("C√¢u tr·∫£ l·ªùi:", key="faq_answer")
        new_category = st.text_input("Ch·ªß ƒë·ªÅ (Category):", key="faq_category") # Th√™m input cho category
        if st.button("Th√™m FAQ"):
            if new_question and new_answer:
                # --- G·ªçi h√†m l∆∞u FAQ v√†o CSDL ---
                success = add_faq_to_db(db_connection, new_question, new_answer, new_category) # G·ªçi h√†m th·∫≠t
                if success:
                    st.success("ƒê√£ th√™m FAQ v√†o C∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!")
                    # C√≥ th·ªÉ th√™m st.rerun() ƒë·ªÉ l√†m m·ªõi danh s√°ch FAQ n·∫øu c√≥ hi·ªÉn th·ªã
                    # st.rerun()
                # L·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m add_faq_to_db
            else:
                st.warning("Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.")


    st.markdown("---")

    # --- C√°c ph·∫ßn kh√°c (Placeholder) ---
    st.header("üë§ Qu·∫£n l√Ω Ng∆∞·ªùi d√πng Admin")
    st.info("Hi·ªán t·∫°i qu·∫£n l√Ω ng∆∞·ªùi d√πng qua file `config.yaml`.")

        # ... (sau ph·∫ßn Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c) ...

    st.markdown("---")

    # --- Xem l·∫°i L·ªãch s·ª≠ Chat ---
    st.header("üí¨ Xem l·∫°i L·ªãch s·ª≠ Chat")
    st.warning("‚ö†Ô∏è T√≠nh nƒÉng n√†y ch·ªâ d√†nh cho m·ª•c ƒë√≠ch g·ª° l·ªói v√† ƒëi·ªÅu tra s·ª± c·ªë an to√†n. Truy c·∫≠p ph·∫£i ƒë∆∞·ª£c ghi log v√† tu√¢n th·ªß quy ƒë·ªãnh b·∫£o m·∫≠t.")

    # --- C∆° ch·∫ø t√¨m ki·∫øm/l·ªçc ƒë∆°n gi·∫£n ---
    # C√°ch 1: T√¨m theo Session ID (n·∫øu b·∫°n bi·∫øt ID)
    search_session_id = st.text_input("Nh·∫≠p Session ID ƒë·ªÉ xem l·ªãch s·ª≠ chat:", key="chat_session_search")

    # C√°ch 2: Ho·∫∑c li√™n k·∫øt t·ª´ B·∫£ng C·∫£nh b√°o (N·∫øu b·∫°n ƒë√£ l∆∞u session_id trong b·∫£ng alerts)
    st.write("Ho·∫∑c ch·ªçn t·ª´ c·∫£nh b√°o (n·∫øu c√≥ Session ID li√™n k·∫øt):")
    # L·∫•y danh s√°ch session_id t·ª´ c√°c c·∫£nh b√°o ƒë√£ fetch (alerts_df)
    linked_session_ids = [""] # Th√™m l·ª±a ch·ªçn r·ªóng
    if 'alerts_df' in locals() and isinstance(alerts_df, pd.DataFrame) and 'chat_session_id' in alerts_df.columns:
         # L·∫•y c√°c session_id kh√¥ng r·ªóng v√† duy nh·∫•t
         valid_sessions = alerts_df[pd.notna(alerts_df['chat_session_id'])]['chat_session_id'].unique()
         linked_session_ids.extend(list(valid_sessions))

    selected_linked_session = st.selectbox("Ch·ªçn Session ID t·ª´ c·∫£nh b√°o:", options=linked_session_ids, key="chat_session_select")

    # X√°c ƒë·ªãnh session_id c·∫ßn t√¨m
    session_id_to_fetch = None
    if search_session_id:
        session_id_to_fetch = search_session_id
    elif selected_linked_session:
        session_id_to_fetch = selected_linked_session

    # N·∫øu c√≥ session_id ƒë·ªÉ t√¨m v√† c√≥ k·∫øt n·ªëi DB
    if session_id_to_fetch and db_connection:
        st.write(f"ƒêang t·∫£i l·ªãch s·ª≠ cho Session ID: `{session_id_to_fetch}`")
        chat_history_df = fetch_chat_history(db_connection, session_id_to_fetch)

        if not chat_history_df.empty:
            st.write(f"**L·ªãch s·ª≠ chat:**")
            # Hi·ªÉn th·ªã d·∫°ng chat message m√¥ ph·ªèng
            for index, row in chat_history_df.iterrows():
                role = "user" if str(row.get('sender', '')).lower() == 'user' else "assistant"
                timestamp_str = row['timestamp'].strftime('%Y-%m-%d %H:%M:%S') if pd.notna(row.get('timestamp')) else ""
                with st.chat_message(role):
                     st.markdown(row.get('message_content', ''))
                     # C√≥ th·ªÉ th√™m user_id (n·∫øu ƒë∆∞·ª£c ph√©p) v√† timestamp v√†o caption
                     st.caption(f"Sender: {row.get('sender', 'N/A')} | User: {row.get('user_id', 'N/A')} | Time: {timestamp_str}")
        elif db_connection: # Ch·ªâ b√°o kh√¥ng t√¨m th·∫•y n·∫øu c√≥ k·∫øt n·ªëi DB
            st.info(f"Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ chat cho Session ID: {session_id_to_fetch}")
    elif (search_session_id or selected_linked_session) and not db_connection:
         st.error("Kh√¥ng th·ªÉ t√¨m ki·∫øm l·ªãch s·ª≠ chat do kh√¥ng c√≥ k·∫øt n·ªëi CSDL.")


    # --- K·∫æT TH√öC N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
    # --- K·∫æT TH√öC N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
