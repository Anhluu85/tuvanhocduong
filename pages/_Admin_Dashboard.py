# pages/üîë_Admin_Dashboard.py

import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import pandas as pd
import os
import datetime # Th√™m ƒë·ªÉ x·ª≠ l√Ω th·ªùi gian n·∫øu c·∫ßn
import psycopg2 # ƒê·∫£m b·∫£o ƒë√£ import

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Admin Dashboard", layout="wide", initial_sidebar_state="expanded")

# --- ƒê·ªçc c·∫•u h√¨nh x√°c th·ª±c ---
config = None
config_path = 'config.yaml'
try:
    if os.path.exists(config_path):
        with open(config_path) as file:
            config = yaml.load(file, Loader=SafeLoader)
    else:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh t·∫°i '{config_path}'.")
        st.stop()
except Exception as e:
    st.error(f"L·ªói ƒë·ªçc/ph√¢n t√≠ch config.yaml: {e}")
    st.stop()

if not config:
    st.error("L·ªói: Kh√¥ng t·∫£i ƒë∆∞·ª£c c·∫•u h√¨nh.")
    st.stop()

# --- L·∫•y Cookie Key t·ª´ Secrets ---
cookie_key = None
try:
    cookie_key = st.secrets["cookie"]["key"]
    if not cookie_key or len(cookie_key) < 32:
        raise ValueError("Cookie key kh√¥ng h·ª£p l·ªá.")
except Exception as e:
     st.error(f"L·ªói c·∫•u h√¨nh Cookie Key: {e}")
     st.stop()

# --- Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Authenticator ---
authenticator = None
try:
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        cookie_key,
        config['cookie']['expiry_days']
    )
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o Authenticator: {e}")
    st.stop()

if not authenticator:
     st.error("L·ªói: Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c Authenticator.")
     st.stop()

# --- Hi·ªÉn th·ªã Form ƒêƒÉng nh·∫≠p ---
# S·ª≠ d·ª•ng key kh√°c nhau cho widget login ·ªü c√°c trang kh√°c nhau n·∫øu c·∫ßn
# Ho·∫∑c d√πng 'main' n·∫øu ch·ªâ c√≥ 1 form login ch√≠nh
name, authentication_status, username = authenticator.login(key='admin_login_form') # ƒê·∫∑t key ri√™ng cho form n√†y

# --- X·ª≠ l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ---
if authentication_status is False:
    st.error('T√™n ƒëƒÉng nh·∫≠p/m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c')
    st.stop()
elif authentication_status is None:
    st.warning('Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u')
    st.stop()
elif authentication_status: # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    # --- B·∫ÆT ƒê·∫¶U N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
    st.sidebar.success(f"Xin ch√†o, **{name}**!")
    authenticator.logout('ƒêƒÉng xu·∫•t', 'sidebar', key='admin_logout_button') # ƒê·∫∑t key ri√™ng

    st.title("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn Admin - AI ƒê·ªìng H√†nh H·ªçc ƒê∆∞·ªùng")
    st.markdown("---")

    # --- PH·∫¶N T∆Ø∆†NG T√ÅC CSDL ---
    @st.cache_resource(ttl=600) # Cache k·∫øt n·ªëi trong 10 ph√∫t
    def connect_db():
        """K·∫øt n·ªëi ƒë·∫øn CSDL PostgreSQL."""
        print("Attempting to connect to the database...") # Log
        try:
            if "uri" in st.secrets.get("database", {}):
                 conn_uri = st.secrets["database"]["uri"]
                 conn = psycopg2.connect(conn_uri)
            elif "host" in st.secrets.get("database", {}):
                 db_creds = st.secrets["database"]
                 conn = psycopg2.connect(
                     host=db_creds["host"],
                     port=db_creds.get("port", 5432),
                     dbname=db_creds["dbname"],
                     user=db_creds["user"],
                     password=db_creds["password"],
                     sslmode=db_creds.get("sslmode", "require")
                 )
            else:
                st.error("Thi·∫øu th√¥ng tin k·∫øt n·ªëi CSDL trong Streamlit Secrets.")
                print("DB connection info missing in secrets.") # Log
                return None
            print("Database connection successful!") # Log
            return conn
        except psycopg2.OperationalError as e:
             st.error(f"L·ªói k·∫øt n·ªëi CSDL: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Ki·ªÉm tra host, port, network, SSL v√† th√¥ng tin x√°c th·ª±c.")
             print(f"DB Connection OperationalError: {e}") # Log
             return None
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi CSDL: {e}")
            print(f"DB Connection Error: {e}") # Log
            return None

    db_connection = connect_db()

    # --- ƒê·ªãnh nghƒ©a c√°c h√†m t∆∞∆°ng t√°c CSDL ---

    @st.cache_data(ttl=300) # Cache d·ªØ li·ªáu stats trong 5 ph√∫t
    def fetch_dashboard_stats(_conn): # ƒê·ªïi t√™n tham s·ªë ƒë·ªÉ tr√°nh xung ƒë·ªôt cache n·∫øu d√πng conn tr·ª±c ti·∫øp
        """L·∫•y c√°c s·ªë li·ªáu th·ªëng k√™ t·ª´ CSDL."""
        if _conn is None:
            return {"weekly_chats": "N/A", "new_alerts": "N/A", "popular_topic": "N/A"}

        print("Fetching dashboard stats from DB...") # Log
        stats = {"weekly_chats": "N/A", "new_alerts": "N/A", "popular_topic": "N/A"}
        cursor = None
        try:
            cursor = _conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM alerts WHERE status = 'M·ªõi'")
            result_alerts = cursor.fetchone()
            stats["new_alerts"] = result_alerts[0] if result_alerts else 0

            # TODO: Implement weekly chats count (requires 'conversations' table with timestamp)
            stats["weekly_chats"] = "N/A"

            cursor.execute("""
                SELECT reason, COUNT(*) as count FROM alerts
                GROUP BY reason ORDER BY count DESC LIMIT 1
            """)
            popular = cursor.fetchone()
            stats["popular_topic"] = popular[0] if popular else "Kh√¥ng c√≥"

            print(f"Fetched stats: {stats}") # Log
            return stats
        except Exception as e:
            st.error(f"L·ªói truy v·∫•n th·ªëng k√™: {e}")
            print(f"Error in fetch_dashboard_stats: {e}")
            return stats
        finally:
             if cursor: cursor.close()

    @st.cache_data(ttl=60) # Cache danh s√°ch alerts trong 1 ph√∫t
    def fetch_alerts(_conn, status_filter=None):
        """L·∫•y danh s√°ch c·∫£nh b√°o t·ª´ CSDL."""
        if _conn is None:
             st.warning("Kh√¥ng c√≥ k·∫øt n·ªëi CSDL, kh√¥ng th·ªÉ t·∫£i c·∫£nh b√°o.")
             return pd.DataFrame() # Tr·∫£ v·ªÅ r·ªóng n·∫øu kh√¥ng c√≥ k·∫øt n·ªëi

        print(f"Fetching alerts from DB with filter: {status_filter}") # Log
        df = pd.DataFrame() # Kh·ªüi t·∫°o df r·ªóng
        try:
            # KI·ªÇM TRA L·∫†I T√äN C·ªòT CHO KH·ªöP CSDL C·ª¶A B·∫†N
            query = "SELECT id, timestamp, reason, snippet, status, assignee, priority, chat_session_id FROM alerts"
            params = []
            if status_filter and status_filter != "T·∫•t c·∫£":
                query += " WHERE status = %s"
                params.append(status_filter)
            query += " ORDER BY timestamp DESC"

            df = pd.read_sql(query, _conn, params=params)
            print(f"Fetched {len(df)} alerts from DB.") # Log

            if not df.empty:
                if 'timestamp' in df.columns and not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
                     df['timestamp'] = pd.to_datetime(df['timestamp'])
                # X·ª≠ l√Ω timezone n·∫øu c·∫ßn
            return df
        except Exception as e:
            st.error(f"L·ªñI fetch_alerts: Kh√¥ng th·ªÉ t·∫£i danh s√°ch c·∫£nh b√°o. Chi ti·∫øt: {e}")
            print(f"Error fetching alerts: {e}")
            return df # Tr·∫£ v·ªÅ df r·ªóng

    def update_alert_status_in_db(conn, alert_id, new_status, assignee):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng∆∞·ªùi ph·ª• tr√°ch c·ªßa c·∫£nh b√°o trong CSDL."""
        if conn is None: return False # L·ªói ƒë√£ b√°o ·ªü n∆°i kh√°c
        cursor = None
        try:
            cursor = conn.cursor()
            print(f"Updating alert ID: {alert_id} to Status: {new_status}, Assignee: {assignee}") # Log
            # KI·ªÇM TRA T√äN B·∫¢NG/C·ªòT
            cursor.execute(
                "UPDATE alerts SET status = %s, assignee = %s WHERE id = %s",
                (new_status, assignee, alert_id)
            )
            conn.commit() # L∆∞u thay ƒë·ªïi
            if cursor.rowcount > 0:
                print(f"DB Update successful for alert ID {alert_id}.") # Log
                # X√≥a cache c·ªßa fetch_alerts ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi
                st.cache_data.clear() # X√≥a to√†n b·ªô cache @st.cache_data (c√≥ th·ªÉ ·∫£nh h∆∞·ªüng h√†m kh√°c)
                # Ho·∫∑c n·∫øu c√≥ c√°ch x√≥a cache c·ª• th·ªÉ cho fetch_alerts th√¨ d√πng (Streamlit c√≥ th·ªÉ ch∆∞a h·ªó tr·ª£ tr·ª±c ti·∫øp)
                # fetch_alerts.clear() # L·ªánh n√†y c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i tr·ª±c ti·∫øp
                return True
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o ID {alert_id} ƒë·ªÉ c·∫≠p nh·∫≠t ho·∫∑c tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi.")
                conn.rollback()
                return False
        except Exception as e:
            if conn: conn.rollback()
            st.error(f"L·ªói CSDL khi c·∫≠p nh·∫≠t c·∫£nh b√°o ID {alert_id}: {e}")
            print(f"Error updating alert {alert_id}: {e}")
            return False
        finally:
            if cursor: cursor.close()

    def add_faq_to_db(conn, question, answer, category=None):
        """Th√™m FAQ m·ªõi v√†o CSDL."""
        if conn is None: return False
        cursor = None
        try:
            cursor = conn.cursor()
            # KI·ªÇM TRA T√äN B·∫¢NG/C·ªòT
            print(f"Adding FAQ: Q='{question[:30]}...', Cat='{category}'") # Log
            cursor.execute(
                "INSERT INTO knowledge_base (question, answer, category) VALUES (%s, %s, %s)",
                (question, answer, category)
            )
            conn.commit()
            print("FAQ added successfully to DB.") # Log
            # C·∫ßn x√≥a cache n·∫øu c√≥ h√†m fetch_faqs
            # fetch_faqs.clear() # V√≠ d·ª•
            return True
        except Exception as e:
            if conn: conn.rollback()
            st.error(f"L·ªói CSDL khi th√™m FAQ: {e}")
            print(f"Error adding FAQ: {e}")
            return False
        finally:
            if cursor: cursor.close()

    #@st.cache_data(ttl=300) # Cache l·ªãch s·ª≠ chat n·∫øu c·∫ßn
    def fetch_chat_history(_conn, session_id):
        """L·∫•y l·ªãch s·ª≠ chat cho m·ªôt session_id c·ª• th·ªÉ t·ª´ CSDL."""
        if _conn is None or not session_id:
            # st.warning("Y√™u c·∫ßu Session ID ƒë·ªÉ truy v·∫•n l·ªãch s·ª≠ chat.")
            return pd.DataFrame()

        print(f"Fetching chat history for session: {session_id}") # Log
        df = pd.DataFrame()
        try:
            # KI·ªÇM TRA T√äN B·∫¢NG/C·ªòT
            query = """
                SELECT message_id, timestamp, sender, message_content, user_id -- L·∫•y c√°c c·ªôt c·∫ßn thi·∫øt
                FROM conversations
                WHERE session_id = %s
                ORDER BY timestamp ASC
            """
            df = pd.read_sql(query, _conn, params=(session_id,))
            print(f"Fetched {len(df)} messages for session {session_id}.") # Log

            if not df.empty:
                if 'timestamp' in df.columns and not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
                     df['timestamp'] = pd.to_datetime(df['timestamp'])
                # X·ª≠ l√Ω timezone n·∫øu c·∫ßn
            return df
        except Exception as e:
            st.error(f"L·ªñI fetch_chat_history cho session {session_id}: {e}")
            print(f"Error fetching chat history for {session_id}: {e}")
            return df # Tr·∫£ v·ªÅ r·ªóng

    # --- K·∫æT TH√öC ƒê·ªäNH NGHƒ®A H√ÄM CSDL ---

    # --- Ki·ªÉm tra k·∫øt n·ªëi v√† hi·ªÉn th·ªã n·ªôi dung ch√≠nh ---
    if db_connection is None:
        st.warning("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn C∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        # C√≥ th·ªÉ d·ª´ng ·ªü ƒë√¢y ho·∫∑c hi·ªÉn th·ªã ph·∫ßn kh√¥ng c·∫ßn DB
        st.stop()
    else:
        st.success("ƒê√£ k·∫øt n·ªëi C∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng.")

        # --- Hi·ªÉn th·ªã Dashboard T·ªïng quan ---
        st.header("üìà T·ªïng quan Ho·∫°t ƒë·ªông")
        stats = fetch_dashboard_stats(db_connection)
        col1, col2, col3 = st.columns(3)
        col1.metric("Cu·ªôc tr√≤ chuy·ªán (7 ng√†y)", stats.get("weekly_chats", "N/A"))
        col2.metric("C·∫£nh b√°o m·ªõi", stats.get("new_alerts", "N/A"))
        col3.metric("Ch·ªß ƒë·ªÅ n·ªïi b·∫≠t", stats.get("popular_topic", "N/A"))

        st.markdown("---")

        # --- Qu·∫£n l√Ω C·∫£nh b√°o ---
        st.header("üö® Qu·∫£n l√Ω C·∫£nh b√°o")
        # L·∫•y d·ªØ li·ªáu alerts (s·ª≠ d·ª•ng cache n·∫øu fetch_alerts ƒë∆∞·ª£c cache)
        alerts_df = fetch_alerts(db_connection)

        if isinstance(alerts_df, pd.DataFrame) and not alerts_df.empty:
            st.info(f"T√¨m th·∫•y {len(alerts_df)} c·∫£nh b√°o.")
            status_options = ["T·∫•t c·∫£", "M·ªõi", "ƒêang x·ª≠ l√Ω", "ƒê√£ gi·∫£i quy·∫øt"]
            selected_status = st.selectbox("L·ªçc theo tr·∫°ng th√°i:", status_options, key="alert_status_filter")

            display_df = alerts_df.copy()
            if selected_status != "T·∫•t c·∫£":
                display_df = display_df[display_df['status'] == selected_status]

            st.dataframe(display_df, use_container_width=True, hide_index=True,
                         column_config={ # ƒê·ªãnh d·∫°ng c·ªôt timestamp
                             "timestamp": st.column_config.DatetimeColumn(
                                 "Th·ªùi gian",
                                 format="YYYY-MM-DD HH:mm:ss",
                             )
                         })

            st.subheader("Xem v√† C·∫≠p nh·∫≠t C·∫£nh b√°o")
            alert_id_options = [""] + list(alerts_df['id'].astype(str).unique())
            selected_alert_id_str = st.selectbox("Ch·ªçn ID c·∫£nh b√°o ƒë·ªÉ x·ª≠ l√Ω:", alert_id_options, key="alert_id_select")

            if selected_alert_id_str:
                try:
                    selected_data_series = alerts_df[alerts_df['id'].astype(str) == selected_alert_id_str].iloc[0]
                    selected_data = selected_data_series.to_dict()

                    st.write(f"**Chi ti·∫øt c·∫£nh b√°o ID:** `{selected_data.get('id', 'N/A')}`")
                    ts = selected_data.get('timestamp')
                    ts_display = ts.strftime('%Y-%m-%d %H:%M:%S') if pd.notna(ts) else "N/A"
                    st.write(f"**Th·ªùi gian:** {ts_display}")
                    st.write(f"**L√Ω do:** {selected_data.get('reason', 'N/A')}")
                    st.write(f"**Tr√≠ch ƒëo·∫°n:**")
                    st.text_area("Snippet", selected_data.get('snippet', ''), height=100, disabled=True, key=f"snippet_{selected_alert_id_str}")
                    st.write(f"**ƒê·ªô ∆∞u ti√™n:** {selected_data.get('priority', 'N/A')}")
                    st.write(f"**Session ID li√™n k·∫øt:** `{selected_data.get('chat_session_id', 'Kh√¥ng c√≥')}`") # Hi·ªÉn th·ªã session id

                    with st.form(key=f"update_alert_form_{selected_alert_id_str}"):
                        st.write("**C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng∆∞·ªùi ph·ª• tr√°ch:**")
                        current_status = selected_data.get('status', 'M·ªõi')
                        status_update_options = ["M·ªõi", "ƒêang x·ª≠ l√Ω", "ƒê√£ gi·∫£i quy·∫øt"] # Ch·ªâ cho ph√©p ch·ªçn tr·∫°ng th√°i h·ª£p l·ªá
                        try:
                            current_status_index = status_update_options.index(current_status)
                        except ValueError:
                            current_status_index = 0 # M·∫∑c ƒë·ªãnh v·ªÅ 'M·ªõi'

                        new_status = st.selectbox("Tr·∫°ng th√°i m·ªõi:", options=status_update_options, index=current_status_index, key=f"status_update_{selected_alert_id_str}")
                        current_assignee = selected_data.get('assignee')
                        default_assignee = name if pd.isna(current_assignee) else current_assignee
                        assignee = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch:", value=default_assignee, key=f"assignee_{selected_alert_id_str}")

                        submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi")
                        if submitted:
                            original_alert_id = selected_data.get('id')
                            if original_alert_id is not None:
                                success = update_alert_status_in_db(db_connection, original_alert_id, new_status, assignee)
                                if success:
                                    st.success(f"ƒê√£ g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t c·∫£nh b√°o {original_alert_id}!")
                                    st.rerun()
                            else:
                                st.error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID c·∫£nh b√°o ƒë·ªÉ c·∫≠p nh·∫≠t.")
                except IndexError:
                     st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu chi ti·∫øt cho ID: {selected_alert_id_str}")
                except Exception as e:
                     st.error(f"L·ªói khi hi·ªÉn th·ªã chi ti·∫øt c·∫£nh b√°o: {e}")
                     print(f"Error rendering alert details {selected_alert_id_str}: {e}")

        elif db_connection is not None:
            st.info("Hi·ªán kh√¥ng c√≥ c·∫£nh b√°o n√†o trong c∆° s·ªü d·ªØ li·ªáu.")

        st.markdown("---")

        # --- Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c ---
        st.header("üìö Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c")
        # TODO: Th√™m code fetch v√† hi·ªÉn th·ªã FAQ (v√≠ d·ª•: d√πng st.dataframe(fetch_faqs(db_connection)))
        st.info("Ch·ª©c nƒÉng xem/s·ª≠a/x√≥a FAQ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")

        with st.expander("Th√™m c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) m·ªõi"):
            # S·ª≠ d·ª•ng key kh√°c nhau cho widget trong expander
            new_question = st.text_input("C√¢u h·ªèi:", key="faq_new_question")
            new_answer = st.text_area("C√¢u tr·∫£ l·ªùi:", key="faq_new_answer")
            new_category = st.text_input("Ch·ªß ƒë·ªÅ (Category):", key="faq_new_category")
            if st.button("Th√™m FAQ", key="faq_add_button"):
                if new_question and new_answer:
                    success = add_faq_to_db(db_connection, new_question, new_answer, new_category)
                    if success:
                        st.success("ƒê√£ th√™m FAQ v√†o C∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!")
                        # C√≥ th·ªÉ rerun ho·∫∑c x√≥a cache c·ªßa h√†m fetch_faqs n·∫øu c√≥
                        # st.rerun()
                else:
                    st.warning("Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.")

        st.markdown("---")

        # --- Xem l·∫°i L·ªãch s·ª≠ Chat ---
        st.header("üí¨ Xem l·∫°i L·ªãch s·ª≠ Chat")
        st.warning("‚ö†Ô∏è T√≠nh nƒÉng n√†y ch·ªâ d√†nh cho m·ª•c ƒë√≠ch g·ª° l·ªói v√† ƒëi·ªÅu tra s·ª± c·ªë an to√†n. Truy c·∫≠p ph·∫£i ƒë∆∞·ª£c ghi log v√† tu√¢n th·ªß quy ƒë·ªãnh b·∫£o m·∫≠t.")

        search_session_id = st.text_input("Nh·∫≠p Session ID ƒë·ªÉ xem l·ªãch s·ª≠ chat:", key="chat_session_search_input")

        # L·∫•y danh s√°ch session_id t·ª´ c√°c c·∫£nh b√°o ƒë√£ fetch
        linked_session_ids = [""]
        if isinstance(alerts_df, pd.DataFrame) and 'chat_session_id' in alerts_df.columns:
             valid_sessions = alerts_df[pd.notna(alerts_df['chat_session_id'])]['chat_session_id'].unique()
             linked_session_ids.extend(list(valid_sessions))
        selected_linked_session = st.selectbox("Ho·∫∑c ch·ªçn Session ID t·ª´ c·∫£nh b√°o:", options=linked_session_ids, key="chat_session_select_box")

        session_id_to_fetch = search_session_id or selected_linked_session

        if session_id_to_fetch:
            st.write(f"ƒêang t·∫£i l·ªãch s·ª≠ cho Session ID: `{session_id_to_fetch}`")
            chat_history_df = fetch_chat_history(db_connection, session_id_to_fetch) # S·ª≠ d·ª•ng h√†m ƒë√£ ƒë·ªãnh nghƒ©a

            if isinstance(chat_history_df, pd.DataFrame) and not chat_history_df.empty:
                st.write(f"**L·ªãch s·ª≠ chat ({len(chat_history_df)} tin nh·∫Øn):**")
                # Hi·ªÉn th·ªã d·∫°ng chat message
                chat_container = st.container(height=400) # ƒê·∫∑t chi·ªÅu cao c·ªë ƒë·ªãnh v√† thanh cu·ªôn
                with chat_container:
                    for index, row in chat_history_df.iterrows():
                        role = "user" if str(row.get('sender', '')).lower() == 'user' else "assistant"
                        timestamp_str = row['timestamp'].strftime('%Y-%m-%d %H:%M:%S') if pd.notna(row.get('timestamp')) else ""
                        with st.chat_message(role, avatar= "üßë‚Äçüéì" if role=='user' else "ü§ñ"): # Th√™m avatar ƒë∆°n gi·∫£n
                             st.markdown(row.get('message_content', ''))
                             st.caption(f"User: {row.get('user_id', '·∫®n danh')} | Time: {timestamp_str}") # C√¢n nh·∫Øc ·∫©n user_id
            elif db_connection:
                st.info(f"Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ chat cho Session ID: {session_id_to_fetch}")

        st.markdown("---")

        # --- C√°c ph·∫ßn kh√°c (Placeholder) ---
        st.header("üë§ Qu·∫£n l√Ω Ng∆∞·ªùi d√πng Admin")
        st.info("Hi·ªán t·∫°i qu·∫£n l√Ω ng∆∞·ªùi d√πng qua file `config.yaml`.")

# --- K·∫øt th√∫c x·ª≠ l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ---
