# pages/üîë_Admin_Dashboard.py

import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import pandas as pd
import os
import datetime # Th√™m ƒë·ªÉ x·ª≠ l√Ω th·ªùi gian n·∫øu c·∫ßn
import psycopg2 # <--- TH√äM D√íNG N√ÄY
# --- C·∫•u h√¨nh trang ---
# Ph·∫£i l√† l·ªánh Streamlit ƒë·∫ßu ti√™n
st.set_page_config(page_title="Admin Dashboard", layout="wide", initial_sidebar_state="expanded")

# --- ƒê·ªçc c·∫•u h√¨nh x√°c th·ª±c ---
# (Gi·ªØ nguy√™n code ƒë·ªçc config.yaml v√† x·ª≠ l√Ω l·ªói nh∆∞ tr∆∞·ªõc)
config = None
config_path = 'config.yaml'
try:
    if os.path.exists(config_path):
        with open(config_path) as file:
            config = yaml.load(file, Loader=SafeLoader)
    else:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh t·∫°i '{config_path}'.")
        st.stop()
except Exception as e:
    st.error(f"L·ªói ƒë·ªçc/ph√¢n t√≠ch config.yaml: {e}")
    st.stop()

if not config:
    st.error("L·ªói: Kh√¥ng t·∫£i ƒë∆∞·ª£c c·∫•u h√¨nh.")
    st.stop()

# --- L·∫•y Cookie Key t·ª´ Secrets ---
# (Gi·ªØ nguy√™n code l·∫•y cookie_key v√† x·ª≠ l√Ω l·ªói nh∆∞ tr∆∞·ªõc)
cookie_key = None
try:
    cookie_key = st.secrets["cookie"]["key"]
    if not cookie_key or len(cookie_key) < 32:
        raise ValueError("Cookie key kh√¥ng h·ª£p l·ªá.")
except Exception as e:
     st.error(f"L·ªói c·∫•u h√¨nh Cookie Key: {e}")
     st.stop()

# --- Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Authenticator ---
# (Gi·ªØ nguy√™n code kh·ªüi t·∫°o authenticator v√† x·ª≠ l√Ω l·ªói nh∆∞ tr∆∞·ªõc)
authenticator = None
try:
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        cookie_key,
        config['cookie']['expiry_days']
    )
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o Authenticator: {e}")
    st.stop()

if not authenticator:
     st.error("L·ªói: Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c Authenticator.")
     st.stop()

# --- Hi·ªÉn th·ªã Form ƒêƒÉng nh·∫≠p ---
name, authentication_status, username = authenticator.login('main')

# --- X·ª≠ l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p ---
if authentication_status is False:
    st.error('T√™n ƒëƒÉng nh·∫≠p/m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c')
    st.stop()
elif authentication_status is None:
    st.warning('Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u')
    st.stop()
elif authentication_status: # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    # --- B·∫ÆT ƒê·∫¶U N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
    st.sidebar.success(f"Xin ch√†o, **{name}**!")
    authenticator.logout('ƒêƒÉng xu·∫•t', 'sidebar') # ƒê·ªïi ch·ªØ th√†nh ti·∫øng Vi·ªát

    st.title("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn Admin - AI ƒê·ªìng H√†nh H·ªçc ƒê∆∞·ªùng")
    st.markdown("---")

    # --- PH·∫¶N T∆Ø∆†NG T√ÅC CSDL (C·∫¶N THAY TH·∫æ B·∫∞NG LOGIC TH·∫¨T) ---
    # V√≠ d·ª• h√†m k·∫øt n·ªëi (C·∫ßn tri·ªÉn khai th·ª±c t·∫ø)
    @st.cache_resource
    def connect_db():
        try:
            # ∆Øu ti√™n ƒë·ªçc URI n·∫øu c√≥
            if "uri" in st.secrets.get("database", {}):
                 conn_uri = st.secrets["database"]["uri"]
                 conn = psycopg2.connect(conn_uri)
            # N·∫øu kh√¥ng c√≥ URI, d√πng c√°c tham s·ªë ri√™ng l·∫ª
            elif "host" in st.secrets.get("database", {}):
                 db_creds = st.secrets["database"]
                 conn = psycopg2.connect(
                     host=db_creds["host"],
                     port=db_creds.get("port", 5432), # D√πng get ƒë·ªÉ c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh
                     dbname=db_creds["dbname"],
                     user=db_creds["user"],
                     password=db_creds["password"],
                     sslmode=db_creds.get("sslmode", "require") # M·∫∑c ƒë·ªãnh require
                 )
            else:
                st.error("Thi·∫øu th√¥ng tin k·∫øt n·ªëi CSDL trong Streamlit Secrets.")
                return None
    
            # st.success("K·∫øt n·ªëi Neon PostgreSQL th√†nh c√¥ng!") # B·ªè comment khi test
            return conn
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi Neon DB: {e}")
            return None
    
    db_connection = connect_db()
    # V√≠ d·ª• c√°c h√†m l·∫•y/c·∫≠p nh·∫≠t d·ªØ li·ªáu (C·∫ßn tri·ªÉn khai th·ª±c t·∫ø)
    def fetch_dashboard_stats(conn):
        # --- VI·∫æT CODE TRUY V·∫§N CSDL ƒê·ªÇ L·∫§Y TH·ªêNG K√ä ---
        # V√≠ d·ª•: ƒê·∫øm s·ªë cu·ªôc tr√≤ chuy·ªán, s·ªë c·∫£nh b√°o m·ªõi,...
        # Tr·∫£ v·ªÅ m·ªôt dictionary ho·∫∑c object ch·ª©a c√°c s·ªë li·ªáu
        if conn:
             # cursor = conn.cursor()
             # cursor.execute("SELECT COUNT(*) FROM conversations WHERE date > NOW() - interval '7 day'")
             # weekly_chats = cursor.fetchone()[0]
             # cursor.execute("SELECT COUNT(*) FROM alerts WHERE status = 'M·ªõi'")
             # new_alerts = cursor.fetchone()[0]
             # return {"weekly_chats": weekly_chats, "new_alerts": new_alerts, "popular_topic": "H·ªçc t·∫≠p (Demo)"}
             pass # B·ªè qua n·∫øu ch∆∞a c√≥ code
        # D·ªØ li·ªáu gi·∫£ l·∫≠p n·∫øu ch∆∞a c√≥ CSDL
        return {"weekly_chats": 150, "new_alerts": 3, "popular_topic": "Thi c·ª≠ (Demo)"}

    def fetch_alerts(conn, status_filter=None):
        # --- VI·∫æT CODE TRUY V·∫§N CSDL ƒê·ªÇ L·∫§Y DANH S√ÅCH C·∫¢NH B√ÅO ---
        # C√≥ th·ªÉ l·ªçc theo status_filter n·∫øu ƒë∆∞·ª£c cung c·∫•p
        # Tr·∫£ v·ªÅ Pandas DataFrame ho·∫∑c list of dictionaries
        if conn:
             # query = "SELECT id, timestamp, reason, snippet, status, assignee FROM alerts"
             # params = []
             # if status_filter and status_filter != "T·∫•t c·∫£":
             #     query += " WHERE status = %s"
             #     params.append(status_filter)
             # query += " ORDER BY timestamp DESC"
             # df = pd.read_sql(query, conn, params=params)
             # return df
             pass
        # D·ªØ li·ªáu gi·∫£ l·∫≠p
        dummy_alerts_list = [
            {"id": "chat_123", "timestamp": datetime.datetime(2023, 10, 27, 10, 15), "reason": "T·ª´ kh√≥a t·ª± h·∫°i", "snippet": "...c·∫£m th·∫•y kh√¥ng mu·ªën s·ªëng n·ªØa...", "status": "M·ªõi", "assignee": None},
            {"id": "chat_456", "timestamp": datetime.datetime(2023, 10, 27, 9, 30), "reason": "Lo √¢u cao ƒë·ªô", "snippet": "...√°p l·ª±c thi c·ª≠ qu√° l·ªõn...", "status": "ƒêang x·ª≠ l√Ω", "assignee": "Admin Tr∆∞·ªùng"},
            {"id": "chat_789", "timestamp": datetime.datetime(2023, 10, 26, 15, 0), "reason": "B·∫°o l·ª±c", "snippet": "...b·ªã b·∫°n b√® b·∫Øt n·∫°t...", "status": "ƒê√£ gi·∫£i quy·∫øt", "assignee": "Admin Tr∆∞·ªùng"},
            {"id": "chat_101", "timestamp": datetime.datetime(2023, 10, 28, 11, 0), "reason": "T·ª´ kh√≥a tr·∫ßm c·∫£m", "snippet": "...bu·ªìn ch√°n kh√¥ng r√µ l√Ω do...", "status": "M·ªõi", "assignee": None},
        ]
        df = pd.DataFrame(dummy_alerts_list)
        if status_filter and status_filter != "T·∫•t c·∫£":
            return df[df['status'] == status_filter]
        return df

    def update_alert_status_in_db(conn, alert_id, new_status, assignee):
        # --- VI·∫æT CODE C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI C·∫¢NH B√ÅO TRONG CSDL ---
        # Tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        st.info(f"(Demo) C·∫≠p nh·∫≠t CSDL: ID={alert_id}, Status={new_status}, Assignee={assignee}")
        if conn:
            try:
                # cursor = conn.cursor()
                # cursor.execute("UPDATE alerts SET status = %s, assignee = %s WHERE id = %s", (new_status, assignee, alert_id))
                # conn.commit() # L∆∞u thay ƒë·ªïi
                # return True
                pass
            except Exception as e:
                st.error(f"L·ªói CSDL khi c·∫≠p nh·∫≠t c·∫£nh b√°o: {e}")
                # conn.rollback() # Ho√†n t√°c n·∫øu c√≥ l·ªói
                return False
        return True # Gi·∫£ l·∫≠p th√†nh c√¥ng

    # --- K·∫æT TH√öC PH·∫¶N T∆Ø∆†NG T√ÅC CSDL ---


    # --- Ki·ªÉm tra k·∫øt n·ªëi CSDL ---
    if db_connection is None:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn C∆° s·ªü d·ªØ li·ªáu. C√°c ch·ª©c nƒÉng s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£ l·∫≠p ho·∫∑c b·ªã h·∫°n ch·∫ø.")
        # C√≥ th·ªÉ ch·ªçn d·ª´ng ·ª©ng d·ª•ng ·ªü ƒë√¢y n·∫øu CSDL l√† b·∫Øt bu·ªôc: st.stop()

    # --- Hi·ªÉn th·ªã Dashboard T·ªïng quan ---
    st.header("üìà T·ªïng quan Ho·∫°t ƒë·ªông")
    stats = fetch_dashboard_stats(db_connection)
    col1, col2, col3 = st.columns(3)
    col1.metric("Cu·ªôc tr√≤ chuy·ªán (7 ng√†y)", stats.get("weekly_chats", "N/A"))
    col2.metric("C·∫£nh b√°o m·ªõi", stats.get("new_alerts", "N/A"))
    col3.metric("Ch·ªß ƒë·ªÅ n·ªïi b·∫≠t", stats.get("popular_topic", "N/A"))
    # Th√™m bi·ªÉu ƒë·ªì n·∫øu c·∫ßn, v√≠ d·ª•:
    # st.line_chart(...) ho·∫∑c st.bar_chart(...)

    st.markdown("---")

    # --- Qu·∫£n l√Ω C·∫£nh b√°o ---
    st.header("üö® Qu·∫£n l√Ω C·∫£nh b√°o")
    alerts_df = fetch_alerts(db_connection) # L·∫•y t·∫•t c·∫£ c·∫£nh b√°o ban ƒë·∫ßu

    if not alerts_df.empty:
        # B·ªô l·ªçc tr·∫°ng th√°i
        status_list = ["T·∫•t c·∫£"] + list(alerts_df['status'].unique())
        selected_status = st.selectbox("L·ªçc theo tr·∫°ng th√°i:", status_list)

        # L·ªçc DataFrame d·ª±a tr√™n l·ª±a ch·ªçn
        if selected_status != "T·∫•t c·∫£":
            display_df = alerts_df[alerts_df['status'] == selected_status]
        else:
            display_df = alerts_df

        # Hi·ªÉn th·ªã b·∫£ng c·∫£nh b√°o
        st.dataframe(display_df, use_container_width=True, hide_index=True) # ·∫®n index cho g·ªçn

        st.subheader("Xem v√† C·∫≠p nh·∫≠t C·∫£nh b√°o")
        alert_ids = [""] + list(alerts_df['id'].unique()) # Th√™m l·ª±a ch·ªçn r·ªóng
        selected_alert_id = st.selectbox("Ch·ªçn ID c·∫£nh b√°o ƒë·ªÉ x·ª≠ l√Ω:", alert_ids)

        if selected_alert_id:
            selected_data = alerts_df[alerts_df['id'] == selected_alert_id].iloc[0]
            st.write(f"**Chi ti·∫øt c·∫£nh b√°o ID:** `{selected_data['id']}`")
            st.write(f"**Th·ªùi gian:** {selected_data['timestamp']}")
            st.write(f"**L√Ω do:** {selected_data['reason']}")
            st.write(f"**Tr√≠ch ƒëo·∫°n:**")
            st.text_area("Snippet", selected_data['snippet'], height=100, disabled=True) # D√πng text_area ƒë·ªÉ xem d·ªÖ h∆°n

            # Form c·∫≠p nh·∫≠t
            with st.form(key=f"update_alert_{selected_alert_id}"):
                st.write("**C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ng∆∞·ªùi ph·ª• tr√°ch:**")
                current_status_index = list(alerts_df['status'].unique()).index(selected_data['status'])
                new_status = st.selectbox("Tr·∫°ng th√°i m·ªõi:", options=list(alerts_df['status'].unique()), index=current_status_index)
                assignee = st.text_input("Ng∆∞·ªùi ph·ª• tr√°ch:", value=selected_data['assignee'] if pd.notna(selected_data['assignee']) else name) # G√°n m·∫∑c ƒë·ªãnh l√† admin ƒëang login

                submitted = st.form_submit_button("L∆∞u thay ƒë·ªïi")
                if submitted:
                    # G·ªçi h√†m c·∫≠p nh·∫≠t CSDL th·ª±c t·∫ø
                    success = update_alert_status_in_db(db_connection, selected_alert_id, new_status, assignee)
                    if success:
                        st.success(f"ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng c·∫£nh b√°o {selected_alert_id}!")
                        # Rerun ƒë·ªÉ l√†m m·ªõi b·∫£ng d·ªØ li·ªáu
                        st.experimental_rerun()
                    else:
                        st.error(f"C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t c·∫£nh b√°o {selected_alert_id}.")

    else:
        st.info("Hi·ªán kh√¥ng c√≥ c·∫£nh b√°o n√†o.")

    st.markdown("---")

    # --- Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c (Placeholder) ---
    st.header("üìö Qu·∫£n l√Ω C∆° s·ªü Ki·∫øn th·ª©c")
    st.info("T√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    # V√≠ d·ª• giao di·ªán ƒë∆°n gi·∫£n ƒë·ªÉ th√™m FAQ
    with st.expander("Th√™m c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) m·ªõi (Demo)"):
        new_question = st.text_input("C√¢u h·ªèi:")
        new_answer = st.text_area("C√¢u tr·∫£ l·ªùi:")
        if st.button("Th√™m FAQ"):
            if new_question and new_answer:
                # --- VI·∫æT CODE L∆ØU FAQ V√ÄO CSDL ·ªû ƒê√ÇY ---
                st.success("(Demo) ƒê√£ th√™m FAQ v√†o CSDL.")
            else:
                st.warning("Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi.")


    st.markdown("---")

    # --- C√°c ph·∫ßn kh√°c (Placeholder) ---
    st.header("üë§ Qu·∫£n l√Ω Ng∆∞·ªùi d√πng Admin")
    st.info("Hi·ªán t·∫°i qu·∫£n l√Ω ng∆∞·ªùi d√πng qua file `config.yaml`. C·∫ßn ph√°t tri·ªÉn giao di·ªán n·∫øu mu·ªën qu·∫£n l√Ω linh ho·∫°t h∆°n.")

    st.header("üí¨ Xem l·∫°i L·ªãch s·ª≠ Chat")
    st.warning("T√≠nh nƒÉng n√†y c·∫ßn ƒë∆∞·ª£c x√¢y d·ª±ng c·∫©n th·∫≠n, ƒë·∫£m b·∫£o quy·ªÅn ri√™ng t∆∞ v√† ch·ªâ truy c·∫≠p khi th·ª±c s·ª± c·∫ßn thi·∫øt cho m·ª•c ƒë√≠ch g·ª° l·ªói ho·∫∑c ƒëi·ªÅu tra s·ª± c·ªë an to√†n.")

    # --- K·∫æT TH√öC N·ªòI DUNG CH√çNH C·ª¶A TRANG ADMIN ---
