# app.py

import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
import datetime
import psycopg2 # ƒê·ªÉ t∆∞∆°ng t√°c v·ªõi PostgreSQL (Neon)
import pandas as pd # V·∫´n c·∫ßn cho m·ªôt s·ªë x·ª≠ l√Ω d·ªØ li·ªáu
import uuid # Th∆∞ vi·ªán ƒë·ªÉ t·∫°o ID duy nh·∫•t


# --- C·∫•u h√¨nh c∆° b·∫£n ---
st.set_page_config(
    page_title="Tr·ª£ L√Ω H·ªçc ƒê∆∞·ªùng AI",
    page_icon="ü§ñ",
    layout="wide" # S·ª≠ d·ª•ng layout r·ªông cho giao di·ªán chat
)

def save_message_to_db(session_id, user_id, sender, content, related_alert_id=None):
    """L∆∞u m·ªôt tin nh·∫Øn v√†o b·∫£ng 'conversations'."""
    conn = connect_db()
    if conn is None:
        print("CRITICAL: Cannot save message - No DB connection.")
        # st.warning("Kh√¥ng th·ªÉ l∆∞u tin nh·∫Øn do l·ªói k·∫øt n·ªëi CSDL.") # B·ªè comment n·∫øu mu·ªën hi·ªÉn th·ªã
        return False

    cursor = None
    message_saved = False
    try:
        cursor = conn.cursor()
        # S·ª≠ d·ª•ng timestamp t·ª´ Python ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
        timestamp_to_save = datetime.datetime.now()

        # --- SQL kh·ªõp v·ªõi b·∫£ng 'conversations' c·ªßa b·∫°n ---
        sql = """
            INSERT INTO conversations
            (session_id, user_id, sender, message_content, timestamp, related_alert_id)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(sql, (session_id, user_id, sender, content, timestamp_to_save, related_alert_id))
        conn.commit()
        message_saved = True
        print(f"Message saved to 'conversations': session={session_id}, sender={sender}, related_alert_id={related_alert_id}")
    except psycopg2.Error as db_err: # B·∫Øt l·ªói c·ª• th·ªÉ c·ªßa psycopg2
        if conn: conn.rollback()
        print(f"--- DATABASE ERROR Saving Message to 'conversations' (psycopg2) ---")
        print(f"Session ID: {session_id}, Sender: {sender}")
        print(f"PostgreSQL Error Code: {db_err.pgcode}")
        print(f"Error Message: {db_err.pgerror}")
        print(f"Data passed: session='{session_id}', user='{user_id}', sender='{sender}', related_alert_id={related_alert_id}")
        print(f"----------------------------------------------------")
        # st.warning(f"L·ªói CSDL khi l∆∞u tin nh·∫Øn: {db_err.pgcode}") # C√¢n nh·∫Øc hi·ªÉn th·ªã l·ªói n√†y
    except Exception as e:
        if conn: conn.rollback()
        print(f"--- GENERAL ERROR Saving Message to 'conversations' ---")
        print(f"Session ID: {session_id}, Sender: {sender}")
        print(f"Error: {e}, Type: {type(e).__name__}")
        print(f"----------------------------------------------------")
        # st.warning(f"L·ªói h·ªá th·ªëng khi l∆∞u tin nh·∫Øn: {type(e).__name__}") # C√¢n nh·∫Øc hi·ªÉn th·ªã l·ªói n√†y
    finally:
        if cursor: cursor.close()
        # Kh√¥ng ƒë√≥ng conn v√¨ n√≥ ƒë∆∞·ª£c cache

    return message_saved

def get_session_id():
    """T·∫°o ho·∫∑c l·∫•y session_id duy nh·∫•t cho phi√™n hi·ªán t·∫°i."""
    if "session_id" not in st.session_state:
        # T·∫°o m·ªôt UUID m·ªõi l√†m session_id khi phi√™n b·∫Øt ƒë·∫ßu
        st.session_state.session_id = str(uuid.uuid4())
        print(f"Generated new session ID: {st.session_state.session_id}") # Log
    return st.session_state.session_id

# --- Qu·∫£n l√Ω Session Chat Gemini v√† L·ªãch s·ª≠ Hi·ªÉn th·ªã ---
# G·ªçi h√†m n√†y s·ªõm ƒë·ªÉ ƒë·∫£m b·∫£o session_id ƒë∆∞·ª£c t·∫°o
current_session_id = get_session_id()
# st.sidebar.caption(f"Session ID: {current_session_id}") # C√≥ th·ªÉ hi·ªÉn th·ªã ƒë·ªÉ debug

if "gemini_history" not in st.session_state:
    st.session_state.gemini_history = []
    print("Initialized empty display history.")

if "api_chat_session" not in st.session_state:
    st.session_state.api_chat_session = None
    print("API Chat Session placeholder created.")

# --- Trong kh·ªëi x·ª≠ l√Ω input m·ªõi ---
user_prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c ƒëi·ªÅu b·∫°n mu·ªën chia s·∫ª...")

 
st.title("ü§ñ Tr·ª£ L√Ω H·ªçc ƒê∆∞·ªùng AI")
# S·ª≠ d·ª•ng caption ƒë√£ ch·ªçn
st.caption("H·ªèi ƒë√°p c√πng AI v·ªÅ h·ªçc t·∫≠p, ngh·ªÅ nghi·ªáp, c·∫£m x√∫c v√† c√°c kh√≥ khƒÉn trong ƒë·ªùi s·ªëng h·ªçc ƒë∆∞·ªùng.")

# --- Qu·∫£n l√Ω API Key v√† C·∫•u h√¨nh ---

# Load .env file if it exists (for local development)
load_dotenv()

# L·∫•y Google API Key
google_api_key = st.secrets.get("GOOGLE_API_KEY", os.getenv("GOOGLE_API_KEY"))
if not google_api_key:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets ho·∫∑c file .env.")
    st.stop()

# L·∫•y th√¥ng tin k·∫øt n·ªëi DB Neon
db_secrets = st.secrets.get("database")
if not db_secrets:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh [database] trong Streamlit Secrets.")
    # Kh√¥ng d·ª´ng ho√†n to√†n, nh∆∞ng ch·ª©c nƒÉng c·∫£nh b√°o s·∫Ω kh√¥ng ho·∫°t ƒë·ªông
    # st.stop() # B·ªè comment n·∫øu CSDL l√† b·∫Øt bu·ªôc ngay t·ª´ ƒë·∫ßu

# --- Kh·ªüi t·∫°o M√¥ h√¨nh Gemini ---
try:
    genai.configure(api_key=google_api_key)
    model = genai.GenerativeModel('gemini-1.5-flash-latest') # Ho·∫∑c phi√™n b·∫£n kh√°c
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o m√¥ h√¨nh Gemini: {e}")
    print(f"Gemini Initialization Error: {e}")
    st.stop()

# --- Ph·∫ßn K·∫øt n·ªëi v√† T∆∞∆°ng t√°c CSDL ---

# S·ª≠ d·ª•ng cache_resource cho k·∫øt n·ªëi DB ƒë·ªÉ t√°i s·ª≠ d·ª•ng
@st.cache_resource(ttl=600)
def connect_db():
    """K·∫øt n·ªëi ƒë·∫øn CSDL PostgreSQL."""
    print("Attempting to connect to the database...")
    if not db_secrets: # Ki·ªÉm tra l·∫°i n·∫øu db_secrets ch∆∞a ƒë∆∞·ª£c load
        print("DB connection info missing in secrets.")
        return None
    try:
        if "uri" in db_secrets:
            conn = psycopg2.connect(db_secrets["uri"])
        elif "host" in db_secrets:
            conn = psycopg2.connect(
                host=db_secrets["host"],
                port=db_secrets.get("port", 5432),
                dbname=db_secrets["dbname"],
                user=db_secrets["user"],
                password=db_secrets["password"],
                sslmode=db_secrets.get("sslmode", "require")
            )
        else:
            print("DB connection info incomplete in secrets.")
            return None
        print("Database connection successful!")
        return conn
    except psycopg2.OperationalError as e:
         # Kh√¥ng hi·ªÉn th·ªã l·ªói tr·ª±c ti·∫øp tr√™n UI ch√≠nh, ch·ªâ log
         print(f"DB Connection OperationalError: {e}. Check credentials, host, port, network, SSL.")
         return None
    except Exception as e:
        print(f"DB Connection Error: {e}")
        return None

def create_alert_in_db(session_id, reason, snippet, priority, status='M·ªõi', user_id_associated=None):
    """T·∫°o m·ªôt b·∫£n ghi c·∫£nh b√°o m·ªõi trong b·∫£ng 'alerts'."""
    conn = connect_db() # L·∫•y k·∫øt n·ªëi (c√≥ th·ªÉ tr·∫£ v·ªÅ None)
    if conn is None:
        print("CRITICAL: Cannot create alert - No DB connection.")
        st.warning("Kh√¥ng th·ªÉ ghi nh·∫≠n c·∫£nh b√°o do l·ªói k·∫øt n·ªëi CSDL.") # Th√¥ng b√°o nh·∫π nh√†ng tr√™n UI
        return False

    cursor = None
    alert_created = False
    try:
        cursor = conn.cursor()
        print(f"Creating alert: session={session_id}, reason='{reason}', priority={priority}")
        # **QUAN TR·ªåNG**: ƒê·∫£m b·∫£o t√™n b·∫£ng v√† c·ªôt kh·ªõp CSDL Neon
        sql = """
            INSERT INTO alerts (chat_session_id, reason, snippet, priority, status, user_id_associated)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        cursor.execute(sql, (session_id, reason, snippet, priority, status, user_id_associated))
        conn.commit() # L∆∞u v√†o CSDL
        alert_created = True
        print(f"Alert created successfully for session {session_id}.")
    except Exception as e:
        if conn: conn.rollback()
        print(f"--- DATABASE ERROR Creating Alert ---")
        print(f"Session ID: {session_id}, Reason: {reason}")
        print(f"Error: {e}, Type: {type(e).__name__}")
        print(f"-----------------------------------")
        st.warning(f"G·∫∑p s·ª± c·ªë khi l∆∞u c·∫£nh b√°o v√†o h·ªá th·ªëng ({type(e).__name__}).") # Th√¥ng b√°o nh·∫π nh√†ng
    finally:
        if cursor: cursor.close()
        # Kh√¥ng ƒë√≥ng conn v√¨ n√≥ ƒë∆∞·ª£c cache

    return alert_created

# --- Ph·∫ßn Logic Nh·∫≠n di·ªán R·ªßi ro ---

# !!! DANH S√ÅCH T·ª™ KH√ìA R·∫§T C∆† B·∫¢N - C·∫¶N M·ªû R·ªòNG V√Ä X√ÅC TH·ª∞C !!!
RISK_KEYWORDS = {
    "t·ª± h·∫°i": ["mu·ªën ch·∫øt", "k·∫øt th√∫c", "t·ª± t·ª≠", "kh√¥ng mu·ªën s·ªëng", "t·ª± l√†m ƒëau", "dao k√©o", "tuy·ªát v·ªçng"],
    "b·∫°o l·ª±c": ["b·ªã ƒë√°nh", "b·ªã ƒë·∫≠p", "b·ªã tr·∫•n", "b·ªã ƒëe d·ªça", "b·∫Øt n·∫°t h·ªôi ƒë·ªìng"],
    # Th√™m c√°c nh√≥m kh√°c: lo √¢u nghi√™m tr·ªçng, l·∫°m d·ª•ng,...
}

def detect_risk(text):
    """Ph√°t hi·ªán t·ª´ kh√≥a r·ªßi ro. Tr·∫£ v·ªÅ lo·∫°i r·ªßi ro ho·∫∑c None."""
    text_lower = text.lower()
    for risk_type, keywords in RISK_KEYWORDS.items():
        for keyword in keywords:
            if keyword in text_lower:
                print(f"!!! RISK DETECTED: Type={risk_type}, Keyword='{keyword}'")
                return risk_type
    return None

def get_emergency_response_message(risk_type):
    """Tr·∫£ v·ªÅ n·ªôi dung tin nh·∫Øn kh·∫©n c·∫•p so·∫°n s·∫µn."""
    # !!! THAY B·∫∞NG TH√îNG TIN LI√äN H·ªÜ TH·∫¨T !!!
    emergency_contacts = """
- ƒê∆∞·ªùng d√¢y n√≥ng ABC: **[S·ªê ƒêI·ªÜN THO·∫†I TH·∫¨T]**
- T∆∞ v·∫•n vi√™n tr∆∞·ªùng XYZ: **[TH√îNG TIN LI√äN H·ªÜ TH·∫¨T]**
- Ho·∫∑c n√≥i chuy·ªán ngay v·ªõi th·∫ßy/c√¥/ng∆∞·ªùi l·ªõn m√† b·∫°n tin t∆∞·ªüng nh·∫•t."""

    base_message = f"M√¨nh nh·∫≠n th·∫•y b·∫°n ƒëang ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt v·∫•n ƒë·ªÅ r·∫•t nghi√™m tr·ªçng ({risk_type}). S·ª± an to√†n c·ªßa b·∫°n l√† quan tr·ªçng nh·∫•t l√∫c n√†y. " \
                   f"M√¨nh l√† AI v√† kh√¥ng th·ªÉ thay th·∫ø s·ª± h·ªó tr·ª£ tr·ª±c ti·∫øp t·ª´ chuy√™n gia. " \
                   f"Vui l√≤ng li√™n h·ªá ngay c√°c ngu·ªìn tr·ª£ gi√∫p sau ƒë√¢y nh√©:\n{emergency_contacts}"
    return base_message

# --- Qu·∫£n l√Ω Session Chat Gemini v√† L·ªãch s·ª≠ Hi·ªÉn th·ªã ---

if "gemini_history" not in st.session_state:
    st.session_state.gemini_history = []
    print("Initialized empty display history.")

if "api_chat_session" not in st.session_state:
    # Ch·ªâ kh·ªüi t·∫°o khi c·∫ßn g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n ho·∫∑c reset
    st.session_state.api_chat_session = None
    print("API Chat Session placeholder created.")

def get_api_chat_session():
    """L·∫•y ho·∫∑c kh·ªüi t·∫°o session chat v·ªõi Gemini API."""
    if st.session_state.api_chat_session is None:
        print("API chat session is None, attempting to initialize...")
        try:
            # X√¢y d·ª±ng history cho API t·ª´ history hi·ªÉn th·ªã (lo·∫°i l·ªùi ch√†o, chuy·ªÉn role)
            api_history_for_init = []
            for msg in st.session_state.gemini_history:
                if msg["role"] in ["user", "assistant"] and not msg.get("is_greeting", False):
                    api_role = "user" if msg["role"] == "user" else "model"
                    api_history_for_init.append({"role": api_role, "parts": [{"text": msg["content"]}]})

            st.session_state.api_chat_session = model.start_chat(history=api_history_for_init)
            print("Initialized API chat session successfully.")
        except Exception as e:
            st.error("L·ªói kh·ªüi t·∫°o phi√™n chat v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i.")
            print(f"Error initializing API chat session: {e}")
            return None # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c
    return st.session_state.api_chat_session

# --- Giao di·ªán Chat Ch√≠nh ---

# 1. Hi·ªÉn th·ªã l·ªùi ch√†o ban ƒë·∫ßu
if not st.session_state.gemini_history:
    timestamp_greet = datetime.datetime.now()
    greeting_content = (
        "Xin ch√†o! M√¨nh l√† Tr·ª£ L√Ω H·ªçc ƒê∆∞·ªùng AI, ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. "
        "H√£y h·ªèi m√¨nh v·ªÅ h·ªçc t·∫≠p, ngh·ªÅ nghi·ªáp, c·∫£m x√∫c ho·∫∑c nh·ªØng kh√≥ khƒÉn b·∫°n g·∫∑p nh√©! üòä\n\n"
        "**L∆∞u √Ω:** M√¨nh ch·ªâ l√† AI h·ªó tr·ª£, kh√¥ng thay th·∫ø chuy√™n gia t√¢m l√Ω. "
        "N·∫øu b·∫°n ƒëang g·∫∑p kh·ªßng ho·∫£ng, h√£y li√™n h·ªá ngay v·ªõi ng∆∞·ªùi l·ªõn tin c·∫≠y ho·∫∑c [ƒê∆∞·ªùng d√¢y n√≥ng h·ªó tr·ª£](#). <span style='color:red; font-weight:bold;'>(C·∫ßn thay link/s·ªë th·∫≠t)</span>"
    )
    greeting_message = {
        "role": "assistant", "content": greeting_content,
        "timestamp": timestamp_greet, "is_greeting": True
    }
    st.session_state.gemini_history.append(greeting_message)
    print("Added initial greeting message to display history.")

# 2. Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.gemini_history:
    role = message["role"]
    avatar = "üßë‚Äçüéì" if role == "user" else "ü§ñ"
    with st.chat_message(name=role, avatar=avatar):
        # Cho ph√©p HTML cho link trong l·ªùi ch√†o, nh∆∞ng c·∫©n th·∫≠n v·ªõi input ng∆∞·ªùi d√πng
        allow_html = message.get("is_greeting", False) or message.get("is_emergency", False)
        st.markdown(message["content"], unsafe_allow_html=allow_html)
        if "timestamp" in message:
             st.caption(message["timestamp"].strftime('%H:%M:%S %d/%m/%Y'))
        if message.get("is_emergency", False):
             st.error("‚ùó H√£y ∆∞u ti√™n li√™n h·ªá h·ªó tr·ª£ kh·∫©n c·∫•p theo th√¥ng tin tr√™n.")

# 3. √î nh·∫≠p li·ªáu v√† x·ª≠ l√Ω

if user_prompt:
    # --- L·∫•y session_id ƒë√£ ƒë∆∞·ª£c t·∫°o ---
    session_id_to_save = current_session_id

    # --- T·∫†O USER ID ·∫®N DANH T·ª∞ ƒê·ªòNG ---
    # C√°ch ƒë∆°n gi·∫£n: D√πng m·ªôt ph·∫ßn c·ªßa session_id ho·∫∑c m·ªôt UUID kh√°c.
    # Quan tr·ªçng: ID n√†y kh√¥ng li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi th√¥ng tin c√° nh√¢n n√†o.
    # N·∫øu b·∫°n KH√îNG c·∫ßn ph√¢n bi·ªát c√°c tin nh·∫Øn c·ªßa c√πng m·ªôt ng∆∞·ªùi d√πng ·∫©n danh
    # qua c√°c phi√™n kh√°c nhau, b·∫°n c√≥ th·ªÉ d√πng ch√≠nh session_id l√†m user_id ·∫©n danh.
    # Ho·∫∑c t·∫°o m·ªôt ID ·∫©n danh ri√™ng l∆∞u trong session state n·∫øu c·∫ßn ph√¢n bi·ªát h∆°n ch√∫t.
    if "anonymous_user_id" not in st.session_state:
         st.session_state.anonymous_user_id = f"anon-{str(uuid.uuid4())[:8]}" # V√≠ d·ª•: anon-abcdef12
         print(f"Generated anonymous user ID: {st.session_state.anonymous_user_id}")
    user_id_to_save = st.session_state.anonymous_user_id
    # ------------------------------------------

    # a. L∆∞u v√† Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    timestamp_user = datetime.datetime.now()
    user_message = {"role": "user", "content": user_prompt, "timestamp": timestamp_user}
    st.session_state.gemini_history.append(user_message)
    # *** G·ªåI H√ÄM L∆ØU TIN NH·∫ÆN USER (v·ªõi ID t·ª± ƒë·ªông) ***
    save_message_to_db(
        session_id=session_id_to_save,
        user_id=user_id_to_save, # D√πng ID ·∫©n danh
        sender="user",
        content=user_prompt
    )
    # Hi·ªÉn th·ªã tin nh·∫Øn user (nh∆∞ c≈©)
    with st.chat_message(name="user", avatar="üßë‚Äçüéì"):
        st.markdown(user_prompt)
        st.caption(timestamp_user.strftime('%H:%M:%S %d/%m/%Y'))

    # b. X·ª≠ l√Ω prompt: Ki·ªÉm tra r·ªßi ro tr∆∞·ªõc
    ai_response_content = None
    is_emergency_response = False
    detected_risk = detect_risk(user_prompt)

    with st.spinner("Tr·ª£ l√Ω AI ƒëang x·ª≠ l√Ω..."):
        if detected_risk:
            # ... (logic x·ª≠ l√Ω r·ªßi ro) ...
            is_emergency_response = True
            ai_response_content = get_emergency_response_message(detected_risk)
            # T·∫°o c·∫£nh b√°o trong DB (v·ªõi ID t·ª± ƒë·ªông)
            create_alert_in_db(
                session_id=session_id_to_save,
                reason=f"Ph√°t hi·ªán r·ªßi ro: {detected_risk}",
                snippet=user_prompt[:500],
                priority=1,
                user_id_associated=user_id_to_save # D√πng ID ·∫©n danh
            )
        else:
            # ... (logic g·ªçi Gemini) ...
             chat_session = get_api_chat_session()
             if chat_session:
                 try:
                     response = chat_session.send_message(user_prompt)
                     ai_response_content = response.text
                     print("Received response from Gemini.")
                 except Exception as e:
                     st.error(f"ƒê√£ x·∫£y ra l·ªói khi giao ti·∫øp v·ªõi AI Gemini: {e}")
                     print(f"Error calling Gemini API: {e}")
             else:
                 ai_response_content = "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra v·ªõi phi√™n chat AI."

    # c. Hi·ªÉn th·ªã v√† L∆∞u tin nh·∫Øn AI (n·∫øu c√≥ ph·∫£n h·ªìi)
    if ai_response_content:
        timestamp_ai = datetime.datetime.now()
        ai_message = {
            "role": "assistant", "content": ai_response_content,
            "timestamp": timestamp_ai, "is_emergency": is_emergency_response
        }
        st.session_state.gemini_history.append(ai_message)
        # *** G·ªåI H√ÄM L∆ØU TIN NH·∫ÆN AI (v·ªõi ID t·ª± ƒë·ªông) ***
        save_message_to_db( # <<< S·ª¨A D√íNG N√ÄY V√Ä C√ÅC D√íNG SAU
            session_id=session_id_to_save,
            user_id=user_id_to_save, # V·∫´n d√πng user ID ·∫©n danh
            sender="assistant",
            content=ai_response_content,
            related_alert_id=created_alert_id # <<< Ch·ªâ c·∫ßn c√°i n√†y, kh√¥ng c·∫ßn is_emergency
            # X√ìA D√íNG: is_emergency=is_emergency_response
        )

        # Hi·ªÉn th·ªã tin nh·∫Øn AI
        with st.chat_message(name="assistant", avatar="ü§ñ"):
             # D√πng created_alert_id ƒë·ªÉ quy·∫øt ƒë·ªãnh unsafe_allow_html v√† hi·ªÉn th·ªã l·ªói
            allow_html_for_ai = (created_alert_id is not None)
            st.markdown(ai_response_content, unsafe_allow_html=allow_html_for_ai)
            st.caption(timestamp_ai.strftime('%H:%M:%S %d/%m/%Y'))
            if created_alert_id is not None: # Ki·ªÉm tra b·∫±ng alert ID thay v√¨ bi·∫øn is_emergency c≈©
                st.error("‚ùó H√£y ∆∞u ti√™n li√™n h·ªá h·ªó tr·ª£ kh·∫©n c·∫•p theo th√¥ng tin tr√™n.")
    else:
         # Ch·ªâ hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu kh√¥ng ph·∫£i l·ªói k·∫øt n·ªëi DB ƒë√£ b√°o tr∆∞·ªõc ƒë√≥
        if db_secrets: # N·∫øu c·∫•u h√¨nh DB c√≥ v·∫ª ·ªïn nh∆∞ng AI v·∫´n kh√¥ng ph·∫£n h·ªìi
             st.warning("Tr·ª£ L√Ω AI hi·ªán kh√¥ng th·ªÉ ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.")

# --- Sidebar ---
with st.sidebar:
    st.header("C√¥ng c·ª• kh√°c")
    # !!! THAY B·∫∞NG LINK TH·∫¨T ƒê·∫æN C√ÅC TRANG KH√ÅC N·∫æU C√ì !!!
    st.markdown("- [üìö Th∆∞ vi·ªán T√†i nguy√™n](#)")
    st.markdown("- [üìÖ ƒê·∫∑t l·ªãch h·∫πn](#)")
    st.markdown("- [üîë Admin Dashboard](#)") # Link t·ªõi trang admin n·∫øu mu·ªën

    st.divider()
    st.header("H·ªó tr·ª£ kh·∫©n c·∫•p")
    # !!! THAY B·∫∞NG TH√îNG TIN TH·∫¨T !!!
    st.markdown("- ƒê∆∞·ªùng d√¢y n√≥ng ABC: **[S·ªê ƒêI·ªÜN THO·∫†I]**")
    st.markdown("- T∆∞ v·∫•n vi√™n tr∆∞·ªùng XYZ: **[LI√äN H·ªÜ]**")
    st.divider()
    st.info("Tr·ª£ L√Ω H·ªçc ƒê∆∞·ªùng AI ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám.")
    st.warning("L·ªãch s·ª≠ chat s·∫Ω b·ªã m·∫•t khi b·∫°n ƒë√≥ng tr√¨nh duy·ªát/tab.")
